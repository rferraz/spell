grammar Spell

  rule statements
    extra_spaces (statement (line_breaks 2.. statement)*) extra_spaces
  end

  rule statement
    identifier arguments spaces? "=" spaces? body
  end

  rule arguments
    spaces? "(" argument_list? ")" spaces?
  end

  rule argument_list
    spaces? argument (spaces argument)* spaces?
  end

  rule argument
    identifier
  end

  rule body
    (guard_expressions / do_expression / expression) (line_breaks with)?
  end

  rule guard_expressions
    (line_breaks guard)+
  end

  rule guard
    "?" spaces (default / expression) spaces "=>" spaces expression
  end

  rule default
    "_"
  end

  rule do_expression
    line_breaks "do" (block_do / simple_do)
  end

  rule simple_do
    (line_breaks expression)+
  end

  rule block_do
    extra_spaces?
    "{"
      extra_spaces?
      expression (line_breaks expression)*
      extra_spaces?
    "}"
    spaces?
  end

  rule expression
    binary / primary / pass
  end

  rule with
    "with" (block_with / simple_with)
  end

  rule simple_with
    (line_breaks (statement / expression))+
  end

  rule block_with
    extra_spaces?
    "{"
      extra_spaces?
      (statement / expression)
      (line_breaks (statement / expression))*
      extra_spaces?
    "}"
    spaces?
  end

  rule binary
    (primary spaces? selector spaces? binary) / primary
  end

  rule primary
    ("(" expression ")") / 
    dictionary_access / 
    array_access / 
    call / 
    variable / 
    literal
  end

  rule dictionary_access
    identifier (period identifier)+
  end

  rule array_access
    identifier array_index+
  end

  rule array_index
    "[" integer "]"
  end

  rule variable
    identifier
  end

  rule call
    identifier (spaces (block / binary))*
  end

  rule block
    "{"
      argument_list "|"
       extra_spaces?
      (expression (line_breaks expression)*)
      extra_spaces?
    "}"
  end

  rule literal
    array / 
    dictionary / 
    number / 
    string
  end

  rule array
    "["
      extra_spaces?
      (expression (extra_spaces expression)*)?
      extra_spaces?
    "]"
  end

  rule dictionary
    "{"
      extra_spaces?
      (dictionary_item (extra_spaces? semicolon extra_spaces? dictionary_item extra_spaces?)*)?
      extra_spaces?
    "}"
  end

  rule dictionary_item
    extra_spaces? 
    identifier colon
    extra_spaces? 
    expression 
    extra_spaces?
  end

  rule number
    decimal / integer
  end

  rule decimal
    sign? digits period digits
  end

  rule integer
    sign? digits
  end

  rule string
    (quote (!quote .)* quote)+
  end

  rule identifier
    !("with" / "do")
    identifier_part (identifier_separator identifier_part)*
    (single_quote)*
  end

  rule identifier_separator
    "#"
  end

  rule identifier_part
    letter alpha*
  end

  rule selector
    !"=>"
    ("+" / "-" / "*" / "/" / "\\" / "~" / "<" / ">" / "=" / "@" / "%" / "&" / "?" / "!" / "," / "^" / ":")+
  end

  rule alpha
    letter / digit
  end

  rule letter
    [a-zA-Z]
  end

  rule sign
    "-"
  end

  rule period
    "."
  end

  rule comma
    ","
  end

  rule colon
    ":"
  end

  rule semicolon
    ";"
  end

  rule quote
    "\""
  end

  rule single_quote
    "'"
  end

  rule digits
    digit+
  end

  rule digit
    [0-9]
  end

  rule breaks
    [\r\n]
  end

  rule spaces
    [ \t]*
    ("#" (!breaks .)* &breaks)?
  end

  rule extra_spaces
    [\r\n\s]*
  end

  rule line_breaks
    spaces? breaks spaces?
  end

  rule pass
    "pass"
  end

end
