((define account (arguments balance) (dictionary new ((balance (invoke balance)))))
 (define account#deposit (arguments account amount)
   (dictionary new ((balance (invoke + (dictionary access (invoke account) balance) (invoke amount))))))
 (define account#withdraw (arguments account amount)
   (case
     ((invoke < (dictionary access (invoke account) balance) (invoke amount))
      (invoke error#signal (literal "Insufficient funds!")))
     (()
      (dictionary new ((balance (invoke - (dictionary access (invoke account) balance) (invoke amount))))))))
 (define main
   (bindings (account (invoke account (literal 10))))
   (invoke account#deposit (invoke account) (literal 10))
   (invoke account#deposit (invoke account) (literal 200))
   (invoke account#withdraw (invoke account) (literal 30)))
 (define fib#recursive (arguments value)
   (case
     ((invoke <= (invoke value) (literal 1)) (invoke value))
     (() (invoke + (invoke fib#recursive (invoke - (invoke value) (literal 1))) (invoke fib#recursive (invoke - (invoke value) (literal 2)))))))
 (define fib#iterative (arguments value)
   (bindings (sq5 (invoke sqrt (literal 5)))
             (phi (invoke / (invoke + (literal 1) (invoke sq5)) (literal 2))))
   (invoke round (invoke ** (invoke phi) (invoke / (invoke value) (invoke sq5)))))
 (define filter (arguments predicate list)
   (case
     ((invoke null (invoke list)) 
      (invoke list))
     ((invoke apply (invoke predicate) (invoke head (invoke list)))
      (invoke : (invoke head (invoke list)) (invoke filter (invoke predicate) (invoke tail (invoke list)))))
     (()
      (invoke filter (invoke predicate) (invoke tail (invoke list))))))
 (define array#partition (arguments array predicate)
   (invoke , (invoke filter (invoke predicate) (invoke array))
             (invoke filter (invoke invert (invoke predicate)) (invoke array))))
 (define quicksort (arguments array)
   (bindings 
     (define quicksort' (arguments array)
       (bindings (pivot (invoke array#midpoint (invoke array)))
                 (partition (invoke array#partition (invoke array) (block (arguments element) (invoke < (invoke element) (invoke pivot))))))
       (invoke ++ (invoke quicksort (invoke first (invoke partition))) (invoke quicksort (invoke last (invoke partition))))))
   (case
     ((invoke <= (invoke array#length (invoke array)) (literal 1)) (invoke array))
     (() (invoke quicksort' (invoke array))))))