grammar Spell

  rule statements
    extra_spaces?
    (statement (line_breaks 2.. statement)*) 
    extra_spaces?
  end

  rule statement
    identifier arguments spaces? equal spaces? body
  end

  rule arguments
    spaces? "(" argument_list? ")" spaces?
  end

  rule argument_list
    spaces? identifier (spaces identifier)* spaces?
  end

  rule body
    (guard_expressions / do_expression / expression) 
    (line_breaks with_expression)?
  end

  rule guard_expressions
    (line_breaks guard)+
  end

  rule guard
    "?" spaces (default / expression) spaces implies spaces expression
  end

  rule default
    "_"
  end

  rule do_expression
    line_breaks do (block_do / simple_do)
  end

  rule simple_do
    (line_breaks expression)+
  end

  rule block_do
    extra_spaces?
    "{"
      extra_spaces?
      expression (line_breaks expression)*
      extra_spaces?
    "}"
    spaces?
  end

  rule expression
    (binary / primary / pass)
  end

  rule with_expression
    with (block_with / simple_with)
  end

  rule simple_with
    (line_breaks (statement / assignment))+
  end

  rule block_with
    extra_spaces?
    "{"
      extra_spaces?
      (statement / assignment)
      (line_breaks (statement / assignment))*
      extra_spaces?
    "}"
    spaces?
  end

  rule assignment
    identifier spaces? binds spaces? expression
  end

  rule binary
    (primary spaces? selector spaces? binary) / primary
  end

  rule primary
    ("(" expression ")") / 
    dictionary_access / 
    array_access / 
    call / 
    variable / 
    literal
  end

  rule dictionary_access
    identifier (period identifier)+
  end

  rule array_access
    identifier array_index+
  end

  rule array_index
    "[" integer "]"
  end

  rule variable
    identifier
  end

  rule call
    identifier (spaces (block / binary))*
  end

  rule block
    "{"
      argument_list "|"
       extra_spaces?
      (expression (line_breaks expression)*)
      extra_spaces?
    "}"
  end

  rule literal
    array / 
    dictionary / 
    number / 
    string
  end

  rule array
    "["
      extra_spaces?
      (expression (extra_spaces expression)*)?
      extra_spaces?
    "]"
  end

  rule dictionary
    "{"
      extra_spaces?
      (dictionary_item (extra_spaces? ";" extra_spaces? dictionary_item extra_spaces?)*)?
      extra_spaces?
    "}"
  end

  rule dictionary_item
    extra_spaces? 
    identifier ":"
    extra_spaces? 
    expression 
    extra_spaces?
  end

  rule number
    decimal / integer
  end

  rule decimal
    sign? digits period digits
  end

  rule integer
    sign? digits
  end

  rule string
    (quote (!quote .)* quote)+
  end

  rule identifier
    !(with / do)
    identifier_part (identifier_part)*
    (single_quote)*
  end

  rule identifier_part
    "#"? letter alpha*
  end

  rule selector
    !(implies / binds)
    (
      "+" / "-" / "*" / "/" / "\\" / "~" / "<" / ">" / "=" / 
       "@" / "%" / "&" / "?" / "!" / "," / "^" / ":"
    )+
  end

  rule alpha
    letter / digit
  end

  rule letter
    [a-zA-Z]
  end

  rule implies
    "->"
  end

  rule binds
    "<-"
  end

  rule do
    "do"
  end

  rule with
    "with"
  end

  rule equal
    "="
  end

  rule sign
    "-"
  end

  rule period
    "."
  end

  rule quote
    "\""
  end

  rule single_quote
    "'"
  end

  rule digits
    digit+
  end

  rule digit
    [0-9]
  end

  rule breaks
    comment? [\r\n] 
  end

  rule spaces
    [ \t]* 
  end

  rule extra_spaces
    ([\s]+ / (comment? [\r\n]))*
  end

  rule line_breaks
    spaces? breaks spaces?
  end

  rule comment
    ("#" (!breaks .)* &breaks)?
  end

  rule pass
    "pass"
  end

end
