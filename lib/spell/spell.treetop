grammar Spell

  rule root
    extra_spaces? root:(head:statement rest:(line_breaks 2.. statement)*) extra_spaces? <Program>
  end

  rule statement
    identifier arguments spaces? equal spaces? body <Statement>
  end

  rule arguments
    spaces? "(" list:argument_list? ")" spaces?
  end

  rule argument_list
    spaces? head:identifier rest:(spaces identifier)* spaces?
  end

  rule body
    expressions:(guard_expressions / do_expression / expression)
    with:(line_breaks with_expression)?
  end

  rule guard_expressions
    (line_breaks guard)+ <Guard>
  end

  rule guard
    "?" spaces condition:(default / expression) spaces implies spaces result:expression
  end

  rule default
    "_" <DefaultGuard>
  end

  rule do_expression
    line_breaks do (do_block / do_lines)
  end

  rule do_lines
    (line_breaks expression)+ <DoLines>
  end

  rule do_block
    extra_spaces?
    "{"
      extra_spaces?
      body:(head:expression rest:(line_breaks expression)* <DoBlock>)
      extra_spaces?
    "}"
    spaces?
  end

  rule with_expression
    with (with_block / with_lines)
  end

  rule with_lines
    (line_breaks binding:(statement / assignment))+ <WithLines>
  end

  rule with_block
    extra_spaces?
    "{"
      extra_spaces?
      body:(head:(statement / assignment) rest:(line_breaks expression:(statement / assignment))* <WithBlock>)
      extra_spaces?
    "}"
    spaces?
  end

  rule assignment
    identifier spaces? binds spaces? expression <Assignment>
  end

  rule expression
    pass / 
    primitive / 
    binary
  end

  rule primitive
    "<" "primitive" ":" spaces identifier ">" <Primitive>
  end

  rule binary
    operand1:primary spaces? selector spaces? operand2:binary <Binary> / 
    primary
  end

  rule primary
    value access:(array_access / dictionary_access)? <Primary>
  end

  rule value
    "(" expression ")" <ParenthesizedExpression> / 
    call / 
    literal
  end

  rule dictionary_access
    (period identifier)+
  end

  rule array_access
    ("[" index:integer "]")+
  end

  rule call
    identifier parameters:([ \t]+ parameter:((identifier !("[" / ".")) / block <Block> / binary))* <Call>
  end

  rule block
    "{"
      extra_spaces?
      list:argument_list? "|"
      extra_spaces?
      body:(head:expression rest:(line_breaks expression)*)
      extra_spaces?
    "}"
  end

  rule literal
    array <ArrayLiteral> /
    dictionary <DictionaryLiteral> /
    number / 
    string
  end

  rule array
    "["
      extra_spaces?
      list:(head:expression rest:(extra_spaces expression)*)?
      extra_spaces?
    "]"
  end

  rule dictionary
    "{"
      extra_spaces?
      list:(head:dictionary_item rest:(extra_spaces? ";" extra_spaces? item:dictionary_item extra_spaces?)*)? 
      extra_spaces?
    "}"
  end

  rule dictionary_item
    extra_spaces? 
    identifier ":"
    extra_spaces? 
    expression 
    extra_spaces?
  end

  rule number
    (decimal / integer) <NumberLiteral>
  end

  rule decimal
    sign? digits period digits
  end

  rule integer
    sign? digits
  end

  rule string
    (quote (!quote .)* quote)+ <StringLiteral>
  end

  rule identifier
    !(with / do)
    identifier_part (identifier_part)*
    (single_quote)*
  end

  rule identifier_part
    "#"? letter alpha*
  end

  rule selector
    !(implies / binds)
    (
      "+" / "-" / "*" / "/" / "\\" / "~" / "<" / ">" / "=" / 
       "@" / "%" / "&" / "?" / "!" / "," / "^" / ":"
    )+
  end

  rule alpha
    letter / digit
  end

  rule letter
    [a-zA-Z]
  end

  rule implies
    "->"
  end

  rule binds
    "<-"
  end

  rule do
    "do"
  end

  rule with
    "with"
  end

  rule equal
    "="
  end

  rule sign
    "-"
  end

  rule period
    "."
  end

  rule quote
    "\""
  end

  rule single_quote
    "'"
  end

  rule digits
    digit+
  end

  rule digit
    [0-9]
  end

  rule breaks
    comment? [\r\n] 
  end

  rule spaces
    [ \t]* 
  end

  rule extra_spaces
    ([\s]+ / (comment? [\r\n]))*
  end

  rule line_breaks
    spaces? breaks spaces?
  end

  rule comment
    ("#" (!breaks .)* &breaks)?
  end

  rule pass
    "pass" <Pass>
  end

end
